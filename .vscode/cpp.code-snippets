{
    "bit": {
        "prefix": "bit",
        "body": [
            "const int BIT = (1<<18);",
            "int bb[BIT];",
            "",
            "int sum(int pos) {",
            "\tint res = 0;",
            "\twhile(pos > 0) {",
            "\t\tres += bb[pos];",
            "\t\tpos -= pos & (-pos);",
            "\t}",
            "\treturn res;",
            "}",
            "void query(int lo, int hi) {",
            "\treturn sum(hi) - sum(lo-1);",
            "}",
            "void add(int pos, int inc) {",
            "\twhile(pos < BIT) {",
            "\t\tbb[pos] += inc;",
            "\t\tpos += pos & (-pos);",
            "\t}",
            "}",
            "void update(int pos, int val) {",
            "\tadd(pos, val - query(pos, pos));",
            "}"
        ],
        "description": "bit"
    },
    "cases": {
        "prefix": "cases",
        "body": [
            "int TC; cin >> TC;",
            "while(TC--) {",
            "\t$0",
            "}"
        ],
        "description": "cases"
    },
    "dsu": {
        "prefix": "dsu",
        "body": [
            "const int DSU = (1<<18);",
            "int dd[DSU];",
            "",
            "void init() {",
            "\tfor(int i=0; i<DSU; i++) {",
            "\t\tdd[i] = -1;",
            "\t}",
            "}",
            "void get(int x) {",
            "\tif(dd[x] < 0) return x;",
            "\treturn dd[x] = get(dd[x]);",
            "}",
            "bool same(int x, int y) {",
            "\treturn get(x) == get(y);",
            "}",
            "bool comb(int x, int y) {",
            "\tx = get(x), y = get(y);",
            "\tif(x == y) return false;",
            "\tdd[x] += dd[y]; dd[y] = x;",
            "\treturn true;",
            "}"
        ],
        "description": "dsu"
    },
    "fastio": {
        "prefix": "fastio",
        "body": [
            "cin.tie(NULL);",
            "ios_base::sync_with_stdio(false);"
        ],
        "description": "fastio"
    },
    "fileio": {
        "prefix": "fileio",
        "body": [
            "freopen(\"${1:file}.in\", \"r\", stdin);",
            "freopen(\"${1:file}.out\", \"w\", stdout);"
        ],
        "description": "fileio"
    },
    "segtree": {
        "prefix": "segtree",
        "body": [
            "const int SEG = (1<<18);",
            "int tt[SEG * 2];",
            "",
            "void update(int pos, int val, int idx=1, int lo=0, int hi=SEG-1) {",
            "\tif(lo == hi) { ",
            "\t\ttt[idx] = inc; ",
            "\t} else {",
            "\t\tint mid = (lo + hi) / 2;",
            "\t\tif(idx <= mid) update(pos, val, idx*2, lo, mid);",
            "\t\telse update(pos, val, idx*2+1, mid+1, hi);",
            "\t\ttt[idx] = tt[idx*2] + tt[idx*2+1];",
            "\t}",
            "",
            "}",
            "void add(int pos, int inc, int idx=1, int lo=0, int hi=SEG-1) {",
            "\ttt[idx] += val;",
            "\tint mid = (lo + hi) / 2;",
            "\tif(idx <= mid) add(pos, inc, idx*2, lo, mid);",
            "\telse add(pos, inc, idx*2+1, mid+1, hi);",
            "}",
            "void query(int li, int ri, int idx=1, int lo=0, int hi=SEG-1) {",
            "\tif(li > hi || ri < lo) {",
            "\t\treturn 0;",
            "\t} else if (li <= lo && hi <= ri) {",
            "\t\treturn tt[i];",
            "\t} else {",
            "\t\tint mid = (lo + hi) / 2;",
            "\t\treturn query(li, ri, idx*2, lo, mid) + query(li, ri, idx*2+1, mid+1, hi);",
            "\t}",
            "}"
        ],
        "description": "segtree"
    },
    "template": {
        "prefix": "template",
        "body": [
            "/**",
            " * ${1:frontmatter}",
            "*/",
            "",
            "#include <iostream>",
            "using namespace std;",
            "",
            "#define N\t(1<<18) // 2e5",
            "",
            "int main() {",
            "",
            "\t$0",
            "}"
        ],
        "description": "template"
    },
    "tlong": {
        "prefix": "tlong",
        "body": [
            "#include <bits/stdc++.h>",
            "using namespace std;",
            "",
            "using ll = long long;",
            "using vi = vector<int>;",
            "using pi = pair<int,int>;",
            "",
            "#define F\t\t\tfirst",
            "#define S\t\t\tsecond",
            "#define SZ(x)\t\tint((x).size())",
            "#define ALL(x)\t\t(x).begin(), (x).end()",
            "#define PB\t\t\tpush_back",
            "#define FOR(i,x,y)\tfor(int i=(x); i<=(y); i++)",
            "#define F0R(i,x)\tFOR(i, 0, (x)-1)",
            "#define ROF(i,x,y)\tfor(int i=(y); i>=(x); i--)",
            "#define R0F(i, x)\tROF(i, 0, (x)-1)",
            "#define EACH(i,x)\tfor(auto& i : (x))",
            "",
            "template<class T> bool ckmin(T& a, const T &b) {",
            "\treturn (b < a ? a = b, 1 : 0); }",
            "template<class T> bool ckmax(T& a, const T &b) {",
            "\treturn (b > a ? a = b, 1 : 0); }",
            "",
            "void dbg() { cerr << endl; }",
            "template<class T, class ...U> void dbg(const T& t, const U&... u) {",
            "\tcerr << ' ' << t; dbg(u...); }",
            "#ifdef LOCAL",
            "\t#define DBG(...) cerr << \"LINE(\" << __LINE__ << \") -> [\" << #__VA_ARGS__ << \"]:\", dbg(__VA_ARGS__)",
            "#else",
            "\t#define DBG(...) 0",
            "#endif",
            "",
            "void IO(string s = \"\") {",
            "\tcin.tie(0)->sync_with_stdio(0);",
            "\tif(SZ(s)) {",
            "\t\tfreopen((s+\".in\").c_str(),\"r\",stdin); ",
            "\t\tfreopen((s+\".out\").c_str(),\"w\",stdout);",
            "\t}",
            "}",
            "",
            "$1",
            "",
            "int main() {",
            "\tIO(\"$2\");",
            "",
            "\t$0",
            "",
            "",
            "}",
            "",
            "/* stuff you should look for",
            "\t* int overflow, array bounds",
            "\t* special cases (n=1?)",
            "\t* do smth instead of nothing and stay organized",
            "\t* WRITE STUFF DOWN",
            "\t* DON'T GET STUCK ON ONE APPROACHy",
            "\t* template by bqi343",
            "*/"
        ],
        "description": "tlong"
    }
}